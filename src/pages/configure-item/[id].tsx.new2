  // Render functions for each step
  const renderMeatSelection = () => {
    if (!item) return null;
    
    return (
      <div className="mb-8">
        <h2 className="text-2xl font-bold mb-4">{item.name}</h2>
        
        <div className="bg-charcoal-800 rounded-lg overflow-hidden mb-6">
          <div className="h-64 relative">
            <img 
              src={item.image_url || '/images/placeholder-food.jpg'} 
              alt={item.name} 
              className="w-full h-full object-cover"
              onError={(e) => {
                (e.target as HTMLImageElement).src = '/images/placeholder-food.jpg';
              }}
            />
          </div>
          <div className="p-4">
            <div className="flex justify-between items-center mb-2">
              <h3 className="text-xl font-bold">{item.name}</h3>
              <span className="text-amber-400 font-bold">${item.price.toFixed(2)}</span>
            </div>
            <p className="text-gray-400 mb-4">{item.description}</p>
          </div>
        </div>
      </div>
    );
  };
  
  const renderSidesSelection = () => {
    const sides = getSides();
    
    return (
      <div className="mb-8">
        <h2 className="text-2xl font-bold mb-2">Select Your Sides</h2>
        <p className="text-gray-400 mb-6">Choose {maxSides} sides to accompany your meal</p>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          {sides.map((side) => (
            <div 
              key={side.id}
              className={`bg-charcoal-800 rounded-lg p-3 flex items-center cursor-pointer transition-colors ${
                selectedSides.some(s => s.id === side.id) 
                  ? 'border-2 border-amber-500' 
                  : 'border-2 border-transparent hover:bg-charcoal-700'
              }`}
              onClick={() => handleSideSelect(side)}
            >
              <div className="w-16 h-16 rounded-md overflow-hidden mr-3 bg-charcoal-700">
                <img 
                  src={side.image_url || '/images/placeholder-food.jpg'} 
                  alt={side.name}
                  className="w-full h-full object-cover"
                  onError={(e) => {
                    (e.target as HTMLImageElement).src = '/images/placeholder-food.jpg';
                  }}
                />
              </div>
              <div className="flex-1">
                <h4 className="font-medium">{side.name}</h4>
                <p className="text-sm text-gray-400 line-clamp-1">{side.description}</p>
              </div>
              {selectedSides.some(s => s.id === side.id) && (
                <div className="w-6 h-6 bg-amber-500 rounded-full flex items-center justify-center ml-2">
                  <svg className="w-4 h-4 text-charcoal-900" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                  </svg>
                </div>
              )}
            </div>
          ))}
        </div>
        
        <div className="bg-charcoal-800 rounded-lg p-4 mb-4">
          <h3 className="font-bold mb-2">Selected Sides ({selectedSides.length}/{maxSides})</h3>
          {selectedSides.length > 0 ? (
            <div className="space-y-2">
              {selectedSides.map((side) => (
                <div key={side.id} className="flex justify-between items-center">
                  <span>{side.name}</span>
                  <button 
                    onClick={() => handleSideSelect(side)}
                    className="text-red-500 hover:text-red-400"
                  >
                    Remove
                  </button>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-gray-500">No sides selected yet</p>
          )}
        </div>
      </div>
    );
  };
  
  const renderSpecialInstructions = () => {
    return (
      <div className="mb-8">
        <h2 className="text-2xl font-bold mb-4">Special Instructions</h2>
        <p className="text-gray-400 mb-6">Any special requests for your order?</p>
        
        <div className="bg-charcoal-800 rounded-lg p-4 mb-6">
          <textarea
            value={configuration.specialInstructions}
            onChange={(e) => handleSpecialInstructions(e.target.value)}
            placeholder="E.g., Extra sauce on the side, No onions, etc."
            className="w-full bg-charcoal-700 text-white border border-charcoal-600 rounded-lg py-2 px-4 focus:outline-none focus:ring-2 focus:ring-amber-500 min-h-[100px]"
          />
        </div>
        
        <div className="bg-charcoal-800 rounded-lg p-4 mb-4">
          <h3 className="font-bold mb-2">Quantity</h3>
          <div className="flex items-center">
            <button 
              onClick={() => handleQuantityChange(Math.max(1, configuration.quantity - 1))}
              className="w-10 h-10 bg-charcoal-700 rounded-l-lg flex items-center justify-center hover:bg-charcoal-600"
              disabled={configuration.quantity <= 1}
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 12H4" />
              </svg>
            </button>
            <div className="w-12 h-10 bg-charcoal-700 flex items-center justify-center border-l border-r border-charcoal-600">
              {configuration.quantity}
            </div>
            <button 
              onClick={() => handleQuantityChange(configuration.quantity + 1)}
              className="w-10 h-10 bg-charcoal-700 rounded-r-lg flex items-center justify-center hover:bg-charcoal-600"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    );
  };
  
  const renderOrderReview = () => {
    if (!item) return null;
    
    // Calculate total price
    const totalPrice = configuration.totalPrice * configuration.quantity;
    
    return (
      <div className="mb-8">
        <h2 className="text-2xl font-bold mb-4">Review Your Order</h2>
        
        <div className="bg-charcoal-800 rounded-lg p-4 mb-6">
          <div className="flex items-center mb-4">
            <div className="w-20 h-20 rounded-md overflow-hidden mr-4 bg-charcoal-700">
              <img 
                src={item.image_url || '/images/placeholder-food.jpg'} 
                alt={item.name}
                className="w-full h-full object-cover"
                onError={(e) => {
                  (e.target as HTMLImageElement).src = '/images/placeholder-food.jpg';
                }}
              />
            </div>
            <div>
              <h3 className="font-bold text-lg">{item.name}</h3>
              <p className="text-gray-400">{isMultiMeatPlate ? '2-Meat Plate' : '1-Meat Plate'}</p>
            </div>
          </div>
          
          {isMultiMeatPlate && secondMeat && (
            <div className="mb-4 pl-4 border-l-2 border-amber-500">
              <h4 className="font-medium">Second Meat Selection</h4>
              <p className="text-gray-400">{secondMeat.name} (+$4.00)</p>
            </div>
          )}
          
          {selectedSides.length > 0 && (
            <div className="mb-4 pl-4 border-l-2 border-amber-500">
              <h4 className="font-medium">Selected Sides</h4>
              <ul className="text-gray-400">
                {selectedSides.map((side) => (
                  <li key={side.id}>{side.name}</li>
                ))}
              </ul>
            </div>
          )}
          
          {selectedDessert && (
            <div className="mb-4 pl-4 border-l-2 border-amber-500">
              <h4 className="font-medium">Dessert</h4>
              <p className="text-gray-400">{selectedDessert.name} (+${selectedDessert.price.toFixed(2)})</p>
            </div>
          )}
          
          {bundleAccepted && (
            <div className="mb-4 pl-4 border-l-2 border-amber-500">
              <h4 className="font-medium">Bundle Deal</h4>
              <p className="text-gray-400">Drink + Side (+$8.99)</p>
            </div>
          )}
          
          {configuration.specialInstructions && (
            <div className="mb-4 pl-4 border-l-2 border-amber-500">
              <h4 className="font-medium">Special Instructions</h4>
              <p className="text-gray-400">{configuration.specialInstructions}</p>
            </div>
          )}
          
          <div className="mt-6 pt-4 border-t border-charcoal-700">
            <div className="flex justify-between mb-2">
              <span>Quantity</span>
              <span>{configuration.quantity}</span>
            </div>
            <div className="flex justify-between mb-2">
              <span>Price per item</span>
              <span>${configuration.totalPrice.toFixed(2)}</span>
            </div>
            <div className="flex justify-between font-bold text-lg text-amber-400">
              <span>Total</span>
              <span>${totalPrice.toFixed(2)}</span>
            </div>
          </div>
        </div>
      </div>
    );
  };
  
  // Determine which step content to render
  const renderStepContent = () => {
    switch (currentStep) {
      case ConfigStep.MEAT_SELECTION:
        return renderMeatSelection();
      case ConfigStep.SIDES_SELECTION:
        return renderSidesSelection();
      case ConfigStep.SPECIAL_INSTRUCTIONS:
        return renderSpecialInstructions();
      case ConfigStep.REVIEW:
        return renderOrderReview();
      default:
        return null;
    }
  };
  
  if (!item) {
    return (
      <div className="min-h-screen bg-charcoal-900 text-white flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-amber-500"></div>
      </div>
    );
  }
  
  return (
    <>
      <Head>
        <title>Customize {item.name} | Brown's Bar-B-Cue</title>
        <meta name="description" content={`Customize your ${item.name} order from Brown's Bar-B-Cue.`} />
      </Head>
      
      <NetworkStatus />
      
      <div className="min-h-screen bg-charcoal-900 text-white">
        {/* Back Button */}
        <div className="bg-charcoal-800 py-4 px-4">
          <div className="max-w-4xl mx-auto">
            <button 
              onClick={() => router.push('/menu')}
              className="flex items-center text-gray-300 hover:text-white transition-colors"
            >
              <svg className="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              Back to Menu
            </button>
          </div>
        </div>
        
        {/* Progress Steps */}
        <div className="bg-charcoal-800 py-4 px-4 border-t border-charcoal-700">
          <div className="max-w-4xl mx-auto">
            <div className="flex justify-between">
              {[
                { step: ConfigStep.MEAT_SELECTION, label: 'Item' },
                { step: ConfigStep.SIDES_SELECTION, label: 'Sides' },
                { step: ConfigStep.SPECIAL_INSTRUCTIONS, label: 'Options' },
                { step: ConfigStep.REVIEW, label: 'Review' }
              ].map((stepInfo, index) => (
                <div key={stepInfo.step} className="flex flex-col items-center">
                  <div 
                    className={`w-8 h-8 rounded-full flex items-center justify-center ${
                      currentStep === stepInfo.step
                        ? 'bg-amber-500 text-charcoal-900'
                        : index < Object.values(ConfigStep).indexOf(currentStep)
                          ? 'bg-green-600 text-white'
                          : 'bg-charcoal-700 text-gray-400'
                    }`}
                  >
                    {index < Object.values(ConfigStep).indexOf(currentStep) ? (
                      <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                        <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                      </svg>
                    ) : (
                      index + 1
                    )}
                  </div>
                  <span className={`text-xs mt-1 ${
                    currentStep === stepInfo.step
                      ? 'text-amber-500 font-bold'
                      : 'text-gray-400'
                  }`}>
                    {stepInfo.label}
                  </span>
                </div>
              ))}
            </div>
          </div>
        </div>
        
        {/* Main Content */}
        <main className="max-w-4xl mx-auto px-4 py-6">
          <AnimatePresence mode="wait">
            <motion.div
              key={currentStep}
              initial="initial"
              animate="animate"
              exit="exit"
              variants={pageVariants}
              className="mb-6"
            >
              {renderStepContent()}
              
              {/* Navigation Buttons */}
              <div className="flex justify-between">
                <button
                  onClick={goToPreviousStep}
                  className="px-6 py-2 bg-charcoal-700 hover:bg-charcoal-600 rounded-lg transition-colors"
                  disabled={currentStep === ConfigStep.MEAT_SELECTION}
                >
                  Back
                </button>
                
                <button
                  onClick={goToNextStep}
                  className="px-6 py-2 bg-red-700 hover:bg-red-600 rounded-lg font-bold transition-colors"
                >
                  {currentStep === ConfigStep.REVIEW ? 'Add to Cart' : 'Continue'}
                </button>
              </div>
            </motion.div>
          </AnimatePresence>
        </main>
        
        {/* Multi-Meat Upgrade Modal */}
        <AnimatePresence>
          {showMultiMeatUpgrade && (
            <MultiMeatUpgrade
              availableMeats={availableMeats}
              onSelectMeat={handleMultiMeatUpgrade}
              onDecline={handleDeclineMultiMeatUpgrade}
            />
          )}
        </AnimatePresence>
        
        {/* Bundle Offer Modal */}
        <AnimatePresence>
          {showBundleOffer && (
            <SpecialBundleOffer
              onAccept={handleAcceptBundleOffer}
              onDecline={handleDeclineBundleOffer}
            />
          )}
        </AnimatePresence>
        
        {/* Dessert Upsell Modal */}
        <AnimatePresence>
          {showDessertUpsell && (
            <motion.div
              className="fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center p-4"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
            >
              <motion.div
                className="bg-charcoal-800 rounded-lg max-w-md w-full p-6"
                initial={{ scale: 0.9, y: 20 }}
                animate={{ scale: 1, y: 0 }}
                exit={{ scale: 0.9, y: 20 }}
              >
                <h3 className="text-xl font-bold mb-2">Add a Dessert?</h3>
                <p className="text-gray-400 mb-4">Complete your meal with something sweet</p>
                
                <div className="grid grid-cols-2 gap-3 mb-4">
                  {getDesserts().slice(0, 4).map((dessert) => (
                    <div
                      key={dessert.id}
                      className="bg-charcoal-700 rounded-lg p-3 cursor-pointer hover:bg-charcoal-600 transition-colors"
                      onClick={() => handleDessertSelect(dessert)}
                    >
                      <div className="h-24 rounded-md overflow-hidden mb-2">
                        <img 
                          src={dessert.image_url || '/images/placeholder-food.jpg'} 
                          alt={dessert.name}
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            (e.target as HTMLImageElement).src = '/images/placeholder-food.jpg';
                          }}
                        />
                      </div>
                      <h4 className="font-medium text-sm">{dessert.name}</h4>
                      <p className="text-amber-500 text-sm">${dessert.price.toFixed(2)}</p>
                    </div>
                  ))}
                </div>
                
                <div className="flex justify-end">
                  <button
                    onClick={handleDeclineDessert}
                    className="px-4 py-2 text-gray-400 hover:text-white transition-colors mr-2"
                  >
                    No Thanks
                  </button>
                </div>
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
        
        {/* Toast Notification */}
        <Toast 
          message={toast.message}
          visible={toast.visible}
          onClose={() => setToast(prev => ({ ...prev, visible: false }))}
        />
      </div>
    </>
  );
};

export default ItemConfigurationPage;
